datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

model User {
  id             String    @id
  name           String
  github_id      Int       @unique
  photo          String
  email          String?
  email_verified Boolean   @default(false)
  sessions       Session[]
  Blog           Blog[]
  // Comments       Comments[]
  Sites          Sites[]
  // Likes          Likes[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  photo       String?
  description String?
  likes_count Int      @default(0)
  userId      String
  sitesId     String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sites       Sites    @relation(fields: [sitesId], references: [id], onDelete: Cascade)
  // Comments    Comments[]
  // Likes       Likes[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model Comments {
//   userId    String
//   blogId    Int
//   content   String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())

//   @@id([userId, blogId])
// }

model Sites {
  userId      String
  id          String  @id @default(cuid())
  name        String
  description String
  fullName    String
  deploy         Boolean @default(false)
  private     Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Blog        Blog[]
}

// model Likes {
//   userId    String
//   blogId    Int
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())

//   @@id([userId, blogId])
// }
